{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/views/StackView/StackViewLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport clamp from 'clamp';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport NavigationActions from \"../../NavigationActions\";\nimport StackActions from \"../../routers/StackActions\";\nimport SceneView from \"../SceneView\";\nimport withOrientation from \"../withOrientation\";\nimport { NavigationProvider } from \"../NavigationContext\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport * as ReactNativeFeatures from \"../../utils/ReactNativeFeatures\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar _Dimensions$get = Dimensions.get('window'),\n    WINDOW_WIDTH = _Dimensions$get.width,\n    WINDOW_HEIGHT = _Dimensions$get.height;\n\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === 812 || WINDOW_WIDTH === 812);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar RESPOND_THRESHOLD = 20;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nvar animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nvar StackViewLayout = function (_React$Component) {\n  _inherits(StackViewLayout, _React$Component);\n\n  var _super = _createSuper(StackViewLayout);\n\n  function StackViewLayout() {\n    var _this;\n\n    _classCallCheck(this, StackViewLayout);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._gestureStartValue = 0;\n    _this._isResponding = false;\n    _this._immediateIndex = null;\n\n    _this._getTransitionConfig = function () {\n      var isModal = _this.props.mode === 'modal';\n      return TransitionConfigs.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.prevTransitionProps, isModal);\n    };\n\n    _this._renderCard = function (scene) {\n      var _this$_getTransitionC = _this._getTransitionConfig(),\n          screenInterpolator = _this$_getTransitionC.screenInterpolator;\n\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, _this.props.transitionProps, {\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null;\n\n      var headerMode = _this._getHeaderMode();\n\n      var marginTop = 0;\n\n      if (!hasHeader && headerMode === 'float') {\n        var isLandscape = _this.props.isLandscape;\n        var headerHeight;\n\n        if (Platform.OS === 'android') {\n          headerHeight = 56;\n        } else if (isLandscape && !Platform.isPad) {\n          headerHeight = 52;\n        } else if (IS_IPHONE_X) {\n          headerHeight = 88;\n        } else {\n          headerHeight = 64;\n        }\n\n        marginTop = -headerHeight;\n      }\n\n      return React.createElement(Card, _extends({}, _this.props.transitionProps, {\n        key: \"card_\" + scene.key,\n        style: [style, {\n          marginTop: marginTop\n        }, _this.props.cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 7\n        }\n      }), _this._renderInnerScene(scene));\n    };\n\n    return _this;\n  }\n\n  _createClass(StackViewLayout, [{\n    key: \"_renderHeader\",\n    value: function _renderHeader(scene, headerMode) {\n      var options = scene.descriptor.options;\n      var header = options.header;\n\n      if (header === null && headerMode === 'screen') {\n        return null;\n      }\n\n      if (React.isValidElement(header)) {\n        return header;\n      }\n\n      var renderHeader = header || function (props) {\n        return React.createElement(Header, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 46\n          }\n        }));\n      };\n\n      var _this$_getTransitionC2 = this._getTransitionConfig(),\n          headerLeftInterpolator = _this$_getTransitionC2.headerLeftInterpolator,\n          headerTitleInterpolator = _this$_getTransitionC2.headerTitleInterpolator,\n          headerRightInterpolator = _this$_getTransitionC2.headerRightInterpolator;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          transitionProps = _this$props.transitionProps,\n          prevTransitionProps = _this$props.prevTransitionProps,\n          passProps = _objectWithoutProperties(_this$props, [\"mode\", \"transitionProps\", \"prevTransitionProps\"]);\n\n      return renderHeader(_objectSpread({}, passProps, {}, transitionProps, {\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator\n      }));\n    }\n  }, {\n    key: \"_animatedSubscribe\",\n    value: function _animatedSubscribe(props) {\n      animatedSubscribeValue(props.transitionProps.layout.width);\n      animatedSubscribeValue(props.transitionProps.layout.height);\n      animatedSubscribeValue(props.transitionProps.position);\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset(resetToIndex, duration) {\n      if (Platform.OS === 'ios' && ReactNativeFeatures.supportsImprovedSpringAnimation()) {\n        Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 5000,\n          damping: 600,\n          mass: 3,\n          useNativeDriver: this.props.transitionProps.position.__isNative\n        }).start();\n      } else {\n        Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: this.props.transitionProps.position.__isNative\n        }).start();\n      }\n    }\n  }, {\n    key: \"_goBack\",\n    value: function _goBack(backFromIndex, duration) {\n      var _this2 = this;\n\n      var _this$props$transitio = this.props.transitionProps,\n          navigation = _this$props$transitio.navigation,\n          position = _this$props$transitio.position,\n          scenes = _this$props$transitio.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this._immediateIndex = toValue;\n\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this2._immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n\n        if (!_this2._isResponding && backFromScene) {\n          navigation.dispatch(NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(StackActions.completeTransition());\n        }\n      };\n\n      if (Platform.OS === 'ios' && ReactNativeFeatures.supportsImprovedSpringAnimation()) {\n        Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 5000,\n          damping: 600,\n          mass: 3,\n          useNativeDriver: position.__isNative\n        }).start(onCompleteAnimation);\n      } else {\n        Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: position.__isNative\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var floatingHeader = null;\n\n      var headerMode = this._getHeaderMode();\n\n      if (headerMode === 'float') {\n        var _scene = this.props.transitionProps.scene;\n        floatingHeader = React.createElement(NavigationProvider, {\n          value: _scene.descriptor.navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 9\n          }\n        }, this._renderHeader(_scene, headerMode));\n      }\n\n      var _this$props2 = this.props,\n          _this$props2$transiti = _this$props2.transitionProps,\n          navigation = _this$props2$transiti.navigation,\n          position = _this$props2$transiti.position,\n          layout = _this$props2$transiti.layout,\n          scene = _this$props2$transiti.scene,\n          scenes = _this$props2$transiti.scenes,\n          mode = _this$props2.mode;\n      var index = navigation.state.index;\n      var isVertical = mode === 'modal';\n      var options = scene.descriptor.options;\n      var gestureDirection = options.gestureDirection;\n      var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n      var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : Platform.OS === 'ios';\n      var responder = !gesturesEnabled ? null : PanResponder.create({\n        onPanResponderTerminate: function onPanResponderTerminate() {\n          _this3._isResponding = false;\n\n          _this3._reset(index, 0);\n\n          _this3.props.onGestureCanceled && _this3.props.onGestureCanceled();\n        },\n        onPanResponderGrant: function onPanResponderGrant() {\n          position.stopAnimation(function (value) {\n            _this3._isResponding = true;\n            _this3._gestureStartValue = value;\n          });\n          _this3.props.onGestureBegin && _this3.props.onGestureBegin();\n        },\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {\n          if (index !== scene.index) {\n            return false;\n          }\n\n          var immediateIndex = _this3._immediateIndex == null ? index : _this3._immediateIndex;\n          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var axisHasBeenMeasured = !!axisLength;\n          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n          var options = scene.descriptor.options;\n          var _options$gestureRespo = options.gestureResponseDistance,\n              userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n          if (screenEdgeDistance > gestureResponseDistance) {\n            return false;\n          }\n\n          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n          var isOnFirstCard = immediateIndex === 0;\n          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n          return shouldSetResponder;\n        },\n        onPanResponderMove: function onPanResponderMove(event, gesture) {\n          var startValue = _this3._gestureStartValue;\n          var axis = isVertical ? 'dy' : 'dx';\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n          var value = clamp(index - 1, currentValue, index);\n          position.setValue(value);\n        },\n        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n          return false;\n        },\n        onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n          if (!_this3._isResponding) {\n            return;\n          }\n\n          _this3._isResponding = false;\n          var immediateIndex = _this3._immediateIndex == null ? index : _this3._immediateIndex;\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var movementDirection = gestureDirectionInverted ? -1 : 1;\n          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n          var defaultVelocity = axisDistance / ANIMATION_DURATION;\n          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n          position.stopAnimation(function (value) {\n            if (gestureVelocity < -0.5) {\n              _this3.props.onGestureCanceled && _this3.props.onGestureCanceled();\n\n              _this3._reset(immediateIndex, resetDuration);\n\n              return;\n            }\n\n            if (gestureVelocity > 0.5) {\n              _this3.props.onGestureFinish && _this3.props.onGestureFinish();\n\n              _this3._goBack(immediateIndex, goBackDuration);\n\n              return;\n            }\n\n            if (value <= index - POSITION_THRESHOLD) {\n              _this3.props.onGestureFinish && _this3.props.onGestureFinish();\n\n              _this3._goBack(immediateIndex, goBackDuration);\n            } else {\n              _this3.props.onGestureCanceled && _this3.props.onGestureCanceled();\n\n              _this3._reset(immediateIndex, resetDuration);\n            }\n          });\n        }\n      });\n      var handlers = gesturesEnabled ? responder.panHandlers : {};\n      var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n      return React.createElement(View, _extends({}, handlers, {\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 9\n        }\n      }, scenes.map(function (s) {\n        return _this3._renderCard(s);\n      })), floatingHeader);\n    }\n  }, {\n    key: \"_getHeaderMode\",\n    value: function _getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n\n      if (Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n\n      return 'float';\n    }\n  }, {\n    key: \"_getHeaderTransitionPreset\",\n    value: function _getHeaderTransitionPreset() {\n      if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n\n      if (this.props.headerTransitionPreset) {\n        return this.props.headerTransitionPreset;\n      } else {\n        return 'fade-in-place';\n      }\n    }\n  }, {\n    key: \"_renderInnerScene\",\n    value: function _renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n          options = _scene$descriptor.options,\n          navigation = _scene$descriptor.navigation,\n          getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n\n      var headerMode = this._getHeaderMode();\n\n      if (headerMode === 'screen') {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 11\n          }\n        }, React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }\n        })), this._renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return StackViewLayout;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scenes: {\n    flex: 1\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/views/StackView/StackViewLayout.js"],"names":["React","clamp","Card","Header","NavigationActions","StackActions","SceneView","withOrientation","NavigationProvider","TransitionConfigs","ReactNativeFeatures","emptyFunction","Dimensions","get","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","IS_IPHONE_X","Platform","OS","isPad","isTVOS","EaseInOut","Easing","inOut","ease","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","animatedSubscribeValue","animatedValue","__isNative","Object","keys","_listeners","length","addListener","StackViewLayout","_gestureStartValue","_isResponding","_immediateIndex","_getTransitionConfig","isModal","props","mode","getTransitionConfig","transitionConfig","transitionProps","prevTransitionProps","_renderCard","scene","screenInterpolator","style","options","descriptor","hasHeader","header","headerMode","_getHeaderMode","marginTop","isLandscape","headerHeight","key","cardStyle","_renderInnerScene","isValidElement","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","passProps","transitionPreset","_getHeaderTransitionPreset","leftInterpolator","titleInterpolator","rightInterpolator","layout","position","resetToIndex","duration","supportsImprovedSpringAnimation","Animated","spring","toValue","stiffness","damping","mass","useNativeDriver","start","timing","easing","backFromIndex","navigation","scenes","Math","max","onCompleteAnimation","backFromScene","find","s","index","dispatch","back","route","immediate","completeTransition","floatingHeader","_renderHeader","state","isVertical","gestureDirection","gestureDirectionInverted","I18nManager","isRTL","gesturesEnabled","responder","PanResponder","create","onPanResponderTerminate","_reset","onGestureCanceled","onPanResponderGrant","stopAnimation","value","onGestureBegin","onMoveShouldSetPanResponder","event","gesture","immediateIndex","currentDragDistance","currentDragPosition","nativeEvent","axisLength","__getValue","axisHasBeenMeasured","screenEdgeDistance","gestureResponseDistance","userGestureResponseDistance","vertical","horizontal","hasDraggedEnough","abs","isOnFirstCard","shouldSetResponder","onPanResponderMove","startValue","axis","axisDistance","currentValue","setValue","onPanResponderTerminationRequest","onPanResponderRelease","movementDirection","movedDistance","gestureVelocity","defaultVelocity","velocity","resetDuration","goBackDuration","onGestureFinish","_goBack","handlers","panHandlers","containerStyle","styles","container","map","headerTransitionPreset","getComponent","SceneComponent","screenProps","Component","StyleSheet","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport clamp from 'clamp';\nimport {\n  Animated,\n  StyleSheet,\n  PanResponder,\n  Platform,\n  View,\n  I18nManager,\n  Easing,\n  Dimensions,\n} from 'react-native';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\nimport NavigationActions from '../../NavigationActions';\nimport StackActions from '../../routers/StackActions';\nimport SceneView from '../SceneView';\nimport withOrientation from '../withOrientation';\nimport { NavigationProvider } from '../NavigationContext';\n\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport * as ReactNativeFeatures from '../../utils/ReactNativeFeatures';\n\nconst emptyFunction = () => {};\n\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X =\n  Platform.OS === 'ios' &&\n  !Platform.isPad &&\n  !Platform.isTVOS &&\n  (WINDOW_HEIGHT === 812 || WINDOW_WIDTH === 812);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 20;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst animatedSubscribeValue = animatedValue => {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nclass StackViewLayout extends React.Component {\n  /**\n   * Used to identify the starting point of the position when the gesture starts, such that it can\n   * be updated according to its relative position. This means that a card can effectively be\n   * \"caught\"- If a gesture starts while a card is animating, the card does not jump into a\n   * corresponding location for the touch.\n   */\n  _gestureStartValue = 0;\n\n  // tracks if a touch is currently happening\n  _isResponding = false;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  _immediateIndex = null;\n\n  _renderHeader(scene, headerMode) {\n    const { options } = scene.descriptor;\n    const { header } = options;\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader = header || (props => <Header {...props} />);\n\n    const {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n    } = this._getTransitionConfig();\n\n    const {\n      mode,\n      transitionProps,\n      prevTransitionProps,\n      ...passProps\n    } = this.props;\n\n    return renderHeader({\n      ...passProps,\n      ...transitionProps,\n      scene,\n      mode: headerMode,\n      transitionPreset: this._getHeaderTransitionPreset(),\n      leftInterpolator: headerLeftInterpolator,\n      titleInterpolator: headerTitleInterpolator,\n      rightInterpolator: headerRightInterpolator,\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _animatedSubscribe(props) {\n    // Hack to make this work with native driven animations. We add a single listener\n    // so the JS value of the following animated values gets updated. We rely on\n    // some Animated private APIs and not doing so would require using a bunch of\n    // value listeners but we'd have to remove them to not leak and I'm not sure\n    // when we'd do that with the current structure we have. `stopAnimation` callback\n    // is also broken with native animated values that have no listeners so if we\n    // want to remove this we have to fix this too.\n    animatedSubscribeValue(props.transitionProps.layout.width);\n    animatedSubscribeValue(props.transitionProps.layout.height);\n    animatedSubscribeValue(props.transitionProps.position);\n  }\n\n  _reset(resetToIndex, duration) {\n    if (\n      Platform.OS === 'ios' &&\n      ReactNativeFeatures.supportsImprovedSpringAnimation()\n    ) {\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: this.props.transitionProps.position.__isNative,\n      }).start();\n    } else {\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: this.props.transitionProps.position.__isNative,\n      }).start();\n    }\n  }\n\n  _goBack(backFromIndex, duration) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this._immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this._immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (!this._isResponding && backFromScene) {\n        navigation.dispatch(\n          NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true,\n          })\n        );\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (\n      Platform.OS === 'ios' &&\n      ReactNativeFeatures.supportsImprovedSpringAnimation()\n    ) {\n      Animated.spring(position, {\n        toValue,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: position.__isNative,\n      }).start(onCompleteAnimation);\n    } else {\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: position.__isNative,\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  render() {\n    let floatingHeader = null;\n    const headerMode = this._getHeaderMode();\n    if (headerMode === 'float') {\n      const { scene } = this.props.transitionProps;\n      floatingHeader = (\n        <NavigationProvider value={scene.descriptor.navigation}>\n          {this._renderHeader(scene, headerMode)}\n        </NavigationProvider>\n      );\n    }\n    const {\n      transitionProps: { navigation, position, layout, scene, scenes },\n      mode,\n    } = this.props;\n    const { index } = navigation.state;\n    const isVertical = mode === 'modal';\n    const { options } = scene.descriptor;\n    const gestureDirection = options.gestureDirection;\n\n    const gestureDirectionInverted =\n      typeof gestureDirection === 'string'\n        ? gestureDirection === 'inverted'\n        : I18nManager.isRTL;\n\n    const gesturesEnabled =\n      typeof options.gesturesEnabled === 'boolean'\n        ? options.gesturesEnabled\n        : Platform.OS === 'ios';\n\n    const responder = !gesturesEnabled\n      ? null\n      : PanResponder.create({\n          onPanResponderTerminate: () => {\n            this._isResponding = false;\n            this._reset(index, 0);\n            this.props.onGestureCanceled && this.props.onGestureCanceled();\n          },\n          onPanResponderGrant: () => {\n            position.stopAnimation((value: number) => {\n              this._isResponding = true;\n              this._gestureStartValue = value;\n            });\n            this.props.onGestureBegin && this.props.onGestureBegin();\n          },\n          onMoveShouldSetPanResponder: (event, gesture) => {\n            if (index !== scene.index) {\n              return false;\n            }\n            const immediateIndex =\n              this._immediateIndex == null ? index : this._immediateIndex;\n            const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n            const currentDragPosition =\n              event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n            const axisLength = isVertical\n              ? layout.height.__getValue()\n              : layout.width.__getValue();\n            const axisHasBeenMeasured = !!axisLength;\n\n            // Measure the distance from the touch to the edge of the screen\n            const screenEdgeDistance = gestureDirectionInverted\n              ? axisLength - (currentDragPosition - currentDragDistance)\n              : currentDragPosition - currentDragDistance;\n            // Compare to the gesture distance relavant to card or modal\n\n            const { options } = scene.descriptor;\n\n            const {\n              gestureResponseDistance: userGestureResponseDistance = {},\n            } = options;\n            const gestureResponseDistance = isVertical\n              ? userGestureResponseDistance.vertical ||\n                GESTURE_RESPONSE_DISTANCE_VERTICAL\n              : userGestureResponseDistance.horizontal ||\n                GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n            // GESTURE_RESPONSE_DISTANCE is about 25 or 30. Or 135 for modals\n            if (screenEdgeDistance > gestureResponseDistance) {\n              // Reject touches that started in the middle of the screen\n              return false;\n            }\n\n            const hasDraggedEnough =\n              Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n\n            const isOnFirstCard = immediateIndex === 0;\n            const shouldSetResponder =\n              hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n            return shouldSetResponder;\n          },\n          onPanResponderMove: (event, gesture) => {\n            // Handle the moving touches for our granted responder\n            const startValue = this._gestureStartValue;\n            const axis = isVertical ? 'dy' : 'dx';\n            const axisDistance = isVertical\n              ? layout.height.__getValue()\n              : layout.width.__getValue();\n            const currentValue =\n              axis === 'dx' && gestureDirectionInverted\n                ? startValue + gesture[axis] / axisDistance\n                : startValue - gesture[axis] / axisDistance;\n            const value = clamp(index - 1, currentValue, index);\n            position.setValue(value);\n          },\n          onPanResponderTerminationRequest: () =>\n            // Returning false will prevent other views from becoming responder while\n            // the navigation view is the responder (mid-gesture)\n            false,\n          onPanResponderRelease: (event, gesture) => {\n            if (!this._isResponding) {\n              return;\n            }\n            this._isResponding = false;\n\n            const immediateIndex =\n              this._immediateIndex == null ? index : this._immediateIndex;\n\n            // Calculate animate duration according to gesture speed and moved distance\n            const axisDistance = isVertical\n              ? layout.height.__getValue()\n              : layout.width.__getValue();\n            const movementDirection = gestureDirectionInverted ? -1 : 1;\n            const movedDistance =\n              movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n            const gestureVelocity =\n              movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n            const defaultVelocity = axisDistance / ANIMATION_DURATION;\n            const velocity = Math.max(\n              Math.abs(gestureVelocity),\n              defaultVelocity\n            );\n            const resetDuration = gestureDirectionInverted\n              ? (axisDistance - movedDistance) / velocity\n              : movedDistance / velocity;\n            const goBackDuration = gestureDirectionInverted\n              ? movedDistance / velocity\n              : (axisDistance - movedDistance) / velocity;\n\n            // To asyncronously get the current animated value, we need to run stopAnimation:\n            position.stopAnimation(value => {\n              // If the speed of the gesture release is significant, use that as the indication\n              // of intent\n              if (gestureVelocity < -0.5) {\n                this.props.onGestureCanceled && this.props.onGestureCanceled();\n                this._reset(immediateIndex, resetDuration);\n                return;\n              }\n              if (gestureVelocity > 0.5) {\n                this.props.onGestureFinish && this.props.onGestureFinish();\n                this._goBack(immediateIndex, goBackDuration);\n                return;\n              }\n\n              // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n              // and the back will happen.\n              if (value <= index - POSITION_THRESHOLD) {\n                this.props.onGestureFinish && this.props.onGestureFinish();\n                this._goBack(immediateIndex, goBackDuration);\n              } else {\n                this.props.onGestureCanceled && this.props.onGestureCanceled();\n                this._reset(immediateIndex, resetDuration);\n              }\n            });\n          },\n        });\n\n    const handlers = gesturesEnabled ? responder.panHandlers : {};\n    const containerStyle = [\n      styles.container,\n      this._getTransitionConfig().containerStyle,\n    ];\n\n    return (\n      <View {...handlers} style={containerStyle}>\n        <View style={styles.scenes}>\n          {scenes.map(s => this._renderCard(s))}\n        </View>\n        {floatingHeader}\n      </View>\n    );\n  }\n\n  _getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    return 'float';\n  }\n\n  _getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    // TODO: validations: 'fade-in-place' or 'uikit' are valid\n    if (this.props.headerTransitionPreset) {\n      return this.props.headerTransitionPreset;\n    } else {\n      return 'fade-in-place';\n    }\n  }\n\n  _renderInnerScene(scene) {\n    const { options, navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this._getHeaderMode();\n    if (headerMode === 'screen') {\n      return (\n        <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView\n              screenProps={screenProps}\n              navigation={navigation}\n              component={SceneComponent}\n            />\n          </View>\n          {this._renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n    return (\n      <SceneView\n        screenProps={screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  }\n\n  _getTransitionConfig = () => {\n    const isModal = this.props.mode === 'modal';\n\n    return TransitionConfigs.getTransitionConfig(\n      this.props.transitionConfig,\n      this.props.transitionProps,\n      this.props.prevTransitionProps,\n      isModal\n    );\n  };\n\n  _renderCard = scene => {\n    const { screenInterpolator } = this._getTransitionConfig();\n    const style =\n      screenInterpolator &&\n      screenInterpolator({ ...this.props.transitionProps, scene });\n\n    // If this screen has \"header\" set to `null` in it's navigation options, but\n    // it exists in a stack with headerMode float, add a negative margin to\n    // compensate for the hidden header\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null;\n    const headerMode = this._getHeaderMode();\n    let marginTop = 0;\n    if (!hasHeader && headerMode === 'float') {\n      const { isLandscape } = this.props;\n      let headerHeight;\n      if (Platform.OS === 'android') {\n        // TODO: Need to handle translucent status bar.\n        headerHeight = 56;\n      } else if (isLandscape && !Platform.isPad) {\n        headerHeight = 52;\n      } else if (IS_IPHONE_X) {\n        headerHeight = 88;\n      } else {\n        headerHeight = 64;\n      }\n      marginTop = -headerHeight;\n    }\n\n    return (\n      <Card\n        {...this.props.transitionProps}\n        key={`card_${scene.key}`}\n        style={[style, { marginTop }, this.props.cardStyle]}\n        scene={scene}\n      >\n        {this._renderInnerScene(scene)}\n      </Card>\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n  },\n  scenes: {\n    flex: 1,\n  },\n});\n\nexport default withOrientation(StackViewLayout);\n"]},"metadata":{},"sourceType":"module"}