{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n\n  var _super = _createSuper(TabNavigationView);\n\n  function TabNavigationView() {\n    var _this;\n\n    _classCallCheck(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n\n    _this._getLabel = function (_ref) {\n      var route = _ref.route,\n          focused = _ref.focused,\n          tintColor = _ref.tintColor;\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: tintColor\n        });\n      }\n\n      return label;\n    };\n\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        getLabelText: getLabelText,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(TabNavigationView, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.navigation.state.index !== this.props.navigation.state.index) {\n        var index = nextProps.navigation.state.index;\n        this.setState(function (state) {\n          return {\n            loaded: state.loaded.includes(index) ? state.loaded : [].concat(_toConsumableArray(state.loaded), [index])\n          };\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 12\n        }\n      }, React.createElement(View, {\n        style: styles.pages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: [StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isFocused: isFocused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 18\n          }\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }]);\n\n  return TabNavigationView;\n}(React.PureComponent);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js"],"names":["React","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_getLabel","route","focused","tintColor","label","getLabelText","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","renderIcon","onTabPress","descriptors","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","nextProps","setState","includes","renderScene","styles","container","pages","map","isFocused","StyleSheet","absoluteFill","opacity","PureComponent","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabNavigationView extends React.PureComponent {\n  state = {\n    loaded: [this.props.navigation.state.index]\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.navigation.state.index !== this.props.navigation.state.index) {\n      const { index } = nextProps.navigation.state;\n\n      this.setState(state => ({\n        loaded: state.loaded.includes(index) ? state.loaded : [...state.loaded, index]\n      }));\n    }\n  }\n\n  _getLabel = ({ route, focused, tintColor }) => {\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      renderIcon,\n      onTabPress\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} jumpTo={this._jumpTo} navigation={navigation} screenProps={screenProps} onTabPress={onTabPress} getLabelText={getLabelText} renderIcon={renderIcon} />;\n  };\n\n  _jumpTo = key => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return <View style={styles.container}>\n        <View style={styles.pages}>\n          {routes.map((route, index) => {\n          if (!loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = navigation.state.index === index;\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isFocused={isFocused}>\n                {renderScene({ route })}\n              </ResourceSavingScene>;\n        })}\n        </View>\n        {this._renderTabBar()}\n      </View>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nexport default createTabNavigator(TabNavigationView);"]},"metadata":{},"sourceType":"module"}