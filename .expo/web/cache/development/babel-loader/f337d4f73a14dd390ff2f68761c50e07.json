{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport SwitchRouter from \"./SwitchRouter\";\nimport NavigationActions from \"../NavigationActions\";\nimport invariant from \"../utils/invariant\";\nimport withDefaultValue from \"../utils/withDefaultValue\";\nimport DrawerActions from \"./DrawerActions\";\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', false);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n  return _objectSpread({}, switchRouter, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return DrawerActions.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return DrawerActions.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return DrawerActions.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, lastState) {\n      var state = lastState || _objectSpread({}, switchRouter.getStateForAction(action, undefined), {\n        isDrawerOpen: false\n      });\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.CLOSE_DRAWER && state.isDrawerOpen) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: false\n          });\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER && !state.isDrawerOpen) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: true\n          });\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: !state.isDrawerOpen\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (switchedState.index !== state.index) {\n          return _objectSpread({}, switchedState, {\n            isDrawerOpen: false\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n});","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/routers/DrawerRouter.js"],"names":["SwitchRouter","NavigationActions","invariant","withDefaultValue","DrawerActions","routeConfigs","config","switchRouter","getActionCreators","route","navStateKey","openDrawer","key","closeDrawer","toggleDrawer","getStateForAction","action","lastState","state","undefined","isDrawerOpen","isRouterTargeted","type","CLOSE_DRAWER","OPEN_DRAWER","TOGGLE_DRAWER","switchedState","index"],"mappings":";;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,iBAAP;AAEA,OAAOC,SAAP;AACA,OAAOC,gBAAP;AAEA,OAAOC,aAAP;AAEA,gBAAe,UAACC,YAAD,EAA+B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AAC5CA,EAAAA,MAAM,qBAAQA,MAAR,CAAN;AACAA,EAAAA,MAAM,GAAGH,gBAAgB,CAACG,MAAD,EAAS,aAAT,EAAwB,KAAxB,CAAzB;AACAA,EAAAA,MAAM,GAAGH,gBAAgB,CAACG,MAAD,EAAS,cAAT,EAAyB,cAAzB,CAAzB;AAEA,MAAMC,YAAY,GAAGP,YAAY,CAACK,YAAD,EAAeC,MAAf,CAAjC;AAEA,2BACKC,YADL;AAGEC,IAAAA,iBAHF,6BAGoBC,KAHpB,EAG2BC,WAH3B,EAGwC;AACpC;AACEC,QAAAA,UAAU,EAAE;AAAA,iBAAMP,aAAa,CAACO,UAAd,CAAyB;AAAEC,YAAAA,GAAG,EAAEF;AAAP,WAAzB,CAAN;AAAA,SADd;AAEEG,QAAAA,WAAW,EAAE;AAAA,iBAAMT,aAAa,CAACS,WAAd,CAA0B;AAAED,YAAAA,GAAG,EAAEF;AAAP,WAA1B,CAAN;AAAA,SAFf;AAGEI,QAAAA,YAAY,EAAE;AAAA,iBAAMV,aAAa,CAACU,YAAd,CAA2B;AAAEF,YAAAA,GAAG,EAAEF;AAAP,WAA3B,CAAN;AAAA;AAHhB,SAIKH,YAAY,CAACC,iBAAb,CAA+BC,KAA/B,EAAsCC,WAAtC,CAJL;AAMD,KAVH;AAYEK,IAAAA,iBAZF,6BAYoBC,MAZpB,EAY4BC,SAZ5B,EAYuC;AACnC,UAAMC,KAAK,GAAGD,SAAS,sBAClBV,YAAY,CAACQ,iBAAb,CAA+BC,MAA/B,EAAuCG,SAAvC,CADkB;AAErBC,QAAAA,YAAY,EAAE;AAFO,QAAvB;;AAKA,UAAMC,gBAAgB,GAAGL,MAAM,CAACJ,GAAP,IAAc,IAAd,IAAsBI,MAAM,CAACJ,GAAP,KAAeM,KAAK,CAACN,GAApE;;AAEA,UAAIS,gBAAJ,EAAsB;AAGpB,YAAIL,MAAM,CAACM,IAAP,KAAgBlB,aAAa,CAACmB,YAA9B,IAA8CL,KAAK,CAACE,YAAxD,EAAsE;AACpE,mCACKF,KADL;AAEEE,YAAAA,YAAY,EAAE;AAFhB;AAID;;AAED,YAAIJ,MAAM,CAACM,IAAP,KAAgBlB,aAAa,CAACoB,WAA9B,IAA6C,CAACN,KAAK,CAACE,YAAxD,EAAsE;AACpE,mCACKF,KADL;AAEEE,YAAAA,YAAY,EAAE;AAFhB;AAID;;AAED,YAAIJ,MAAM,CAACM,IAAP,KAAgBlB,aAAa,CAACqB,aAAlC,EAAiD;AAC/C,mCACKP,KADL;AAEEE,YAAAA,YAAY,EAAE,CAACF,KAAK,CAACE;AAFvB;AAID;AACF;;AAGD,UAAMM,aAAa,GAAGnB,YAAY,CAACQ,iBAAb,CAA+BC,MAA/B,EAAuCE,KAAvC,CAAtB;;AAEA,UAAIQ,aAAa,KAAK,IAAtB,EAA4B;AAE1B,eAAO,IAAP;AACD;;AAED,UAAIA,aAAa,KAAKR,KAAtB,EAA6B;AAC3B,YAAIQ,aAAa,CAACC,KAAd,KAAwBT,KAAK,CAACS,KAAlC,EAAyC;AAEvC,mCACKD,aADL;AAEEN,YAAAA,YAAY,EAAE;AAFhB;AAID;;AAGD,eAAOM,aAAP;AACD;;AAED,aAAOR,KAAP;AACD;AAnEH;AAqED,CA5ED","sourcesContent":["import SwitchRouter from './SwitchRouter';\nimport NavigationActions from '../NavigationActions';\n\nimport invariant from '../utils/invariant';\nimport withDefaultValue from '../utils/withDefaultValue';\n\nimport DrawerActions from './DrawerActions';\n\nexport default (routeConfigs, config = {}) => {\n  config = { ...config };\n  config = withDefaultValue(config, 'resetOnBlur', false);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route, navStateKey) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey),\n      };\n    },\n\n    getStateForAction(action, lastState) {\n      const state = lastState || {\n        ...switchRouter.getStateForAction(action, undefined),\n        isDrawerOpen: false,\n      };\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n\n        if (action.type === DrawerActions.CLOSE_DRAWER && state.isDrawerOpen) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER && !state.isDrawerOpen) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (switchedState.index !== state.index) {\n          // If the tabs have changed, make sure to close the drawer\n          return {\n            ...switchedState,\n            isDrawerOpen: false,\n          };\n        }\n        // Return the state new state, as returned by the switch router.\n        // The index hasn't changed, so this most likely means that a child router has returned a new state\n        return switchedState;\n      }\n\n      return state;\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}