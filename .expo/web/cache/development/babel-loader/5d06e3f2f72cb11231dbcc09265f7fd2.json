{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-material-bottom-tabs/node_modules/react-navigation-tabs/dist/views/MaterialTopTabBar.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport CrossFadeIcon from \"./CrossFadeIcon\";\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  var _super = _createSuper(TabBarTop);\n\n  function TabBarTop() {\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._renderLabel = function (_ref) {\n      var route = _ref.route,\n          index = _ref.index,\n          focused = _ref.focused;\n      var _this$props = _this.props,\n          position = _this$props.position,\n          navigation = _this$props.navigation,\n          activeTintColor = _this$props.activeTintColor,\n          inactiveTintColor = _this$props.inactiveTintColor,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var routes = navigation.state.routes;\n      var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {\n        return i;\n      })));\n      var outputRange = inputRange.map(function (inputIndex) {\n        return inputIndex === index ? activeTintColor : inactiveTintColor;\n      });\n      var color = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = focused ? activeTintColor : inactiveTintColor;\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 14\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: tintColor\n        });\n      }\n\n      return label;\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var route = _ref2.route,\n          index = _ref2.index;\n      var _this$props2 = _this.props,\n          position = _this$props2.position,\n          navigation = _this$props2.navigation,\n          activeTintColor = _this$props2.activeTintColor,\n          inactiveTintColor = _this$props2.inactiveTintColor,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      var inputRange = [-1].concat(_toConsumableArray(navigation.state.routes.map(function (x, i) {\n        return i;\n      })));\n      var activeOpacity = position.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (i) {\n          return i === index ? 1 : 0;\n        })\n      });\n      var inactiveOpacity = position.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (i) {\n          return i === index ? 0 : 1;\n        })\n      });\n      return React.createElement(CrossFadeIcon, {\n        route: route,\n        navigation: navigation,\n        activeOpacity: activeOpacity,\n        inactiveOpacity: inactiveOpacity,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 12\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderIcon = _this$props3.renderIcon,\n          getLabelText = _this$props3.getLabelText,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"renderIcon\", \"getLabelText\"]);\n\n      return React.createElement(TabBar, _extends({}, rest, {\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nTabBarTop.defaultProps = {\n  activeTintColor: '#fff',\n  inactiveTintColor: '#fff',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nexport { TabBarTop as default };\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-material-bottom-tabs/node_modules/react-navigation-tabs/dist/views/MaterialTopTabBar.js"],"names":["React","TabBar","CrossFadeIcon","TabBarTop","_renderLabel","route","index","focused","props","position","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","allowFontScaling","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","label","getLabelText","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","activeOpacity","inactiveOpacity","icon","rest","PureComponent","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport CrossFadeIcon from './CrossFadeIcon';\n\nexport default class TabBarTop extends React.PureComponent {\n  static defaultProps = {\n    activeTintColor: '#fff',\n    inactiveTintColor: '#fff',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true\n  };\n\n  _renderLabel = ({ route, index, focused }) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(inputIndex => inputIndex === index ? activeTintColor : inactiveTintColor);\n    const color = position.interpolate({\n      inputRange,\n      outputRange: outputRange\n    });\n\n    const tintColor = focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return <Animated.Text style={[styles.label, { color }, labelStyle]} allowFontScaling={allowFontScaling}>\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>;\n    }\n    if (typeof label === 'function') {\n      return label({ focused, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, index }) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      iconStyle\n    } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...navigation.state.routes.map((x, i) => i)];\n    const activeOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map(i => i === index ? 1 : 0)\n    });\n    const inactiveOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map(i => i === index ? 0 : 1)\n    });\n\n    return <CrossFadeIcon route={route} navigation={navigation} activeOpacity={activeOpacity} inactiveOpacity={inactiveOpacity} activeTintColor={activeTintColor} inactiveTintColor={inactiveTintColor} renderIcon={renderIcon} style={[styles.icon, iconStyle]} />;\n  };\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const { navigation, renderIcon, getLabelText, ...rest } = this.props;\n\n    return (\n      /* $FlowFixMe */\n      <TabBar {...rest} navigationState={navigation.state} renderIcon={this._renderIcon} renderLabel={this._renderLabel} />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});"]},"metadata":{},"sourceType":"module"}