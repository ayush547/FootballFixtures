{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-native-paper/src/core/withTheme.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport merge from 'deepmerge';\nimport ThemeProvider, { ThemeContext } from \"./ThemeProvider\";\nvar REACT_METHODS = ['autobind', 'childContextTypes', 'componentDidMount', 'componentDidUpdate', 'componentWillMount', 'componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'contextTypes', 'displayName', 'getChildContext', 'getDefaultProps', 'getDOMNode', 'getInitialState', 'mixins', 'propTypes', 'render', 'replaceProps', 'setProps', 'shouldComponentUpdate', 'statics', 'updateComponent'];\n\nvar isClassComponent = function isClassComponent(Component) {\n  return Boolean(Component.prototype && Component.prototype.isReactComponent);\n};\n\nexport default function withTheme(Comp) {\n  var ThemedComponent = function (_React$Component) {\n    _inherits(ThemedComponent, _React$Component);\n\n    var _super = _createSuper(ThemedComponent);\n\n    function ThemedComponent() {\n      var _this;\n\n      _classCallCheck(this, ThemedComponent);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _this._merge = function (a, b) {\n        var previous = _this._previous;\n\n        if (previous && previous.a === a && previous.b === b) {\n          return previous.result;\n        }\n\n        var result = a && b ? merge(a, b) : a || b;\n        _this._previous = {\n          a: a,\n          b: b,\n          result: result\n        };\n        return result;\n      };\n\n      return _this;\n    }\n\n    _createClass(ThemedComponent, [{\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(ThemeContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }\n        }, function (theme) {\n          var merged = _this2._merge(theme, _this2.props.theme);\n\n          var element;\n\n          if (isClassComponent(Comp)) {\n            element = React.createElement(Comp, _extends({}, _this2.props, {\n              ref: function ref(c) {\n                _this2._root = c;\n              },\n              theme: merged,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }\n            }));\n          } else {\n            element = React.createElement(Comp, _extends({}, _this2.props, {\n              theme: merged,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 25\n              }\n            }));\n          }\n\n          if (merged !== _this2.props.theme) {\n            return React.createElement(ThemeProvider, {\n              theme: merged,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 22\n              }\n            }, element);\n          }\n\n          return element;\n        });\n      }\n    }]);\n\n    return ThemedComponent;\n  }(React.Component);\n\n  ThemedComponent.displayName = \"withTheme(\" + (Comp.displayName || Comp.name) + \")\";\n\n  if (isClassComponent(Comp)) {\n    ThemedComponent.prototype.getWrappedInstance = function getWrappedInstance() {\n      return this._root.getWrappedInstance ? this._root.getWrappedInstance() : this._root;\n    };\n\n    Object.getOwnPropertyNames(Comp.prototype).filter(function (prop) {\n      return !(REACT_METHODS.includes(prop) || prop in React.Component.prototype || prop in ThemedComponent.prototype || prop.startsWith('_'));\n    }).forEach(function (prop) {\n      if (typeof Comp.prototype[prop] === 'function') {\n        ThemedComponent.prototype[prop] = function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          Comp.prototype[prop].apply(this.getWrappedInstance(), args);\n        };\n      } else {\n        Object.defineProperty(ThemedComponent.prototype, prop, {\n          get: function get() {\n            return this.getWrappedInstance()[prop];\n          },\n          set: function set(value) {\n            this.getWrappedInstance()[prop] = value;\n          }\n        });\n      }\n    });\n  }\n\n  hoistNonReactStatics(ThemedComponent, Comp);\n  return ThemedComponent;\n}","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-native-paper/src/core/withTheme.js"],"names":["React","hoistNonReactStatics","merge","ThemeProvider","ThemeContext","REACT_METHODS","isClassComponent","Component","Boolean","prototype","isReactComponent","withTheme","Comp","ThemedComponent","_merge","a","b","previous","_previous","result","theme","merged","props","element","c","_root","displayName","name","getWrappedInstance","Object","getOwnPropertyNames","filter","prop","includes","startsWith","forEach","args","apply","defineProperty","get","set","value"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport merge from 'deepmerge';\nimport ThemeProvider, { ThemeContext } from './ThemeProvider';\nimport type { Theme } from '../types';\n\nconst REACT_METHODS = [\n  'autobind',\n  'childContextTypes',\n  'componentDidMount',\n  'componentDidUpdate',\n  'componentWillMount',\n  'componentWillReceiveProps',\n  'componentWillUnmount',\n  'componentWillUpdate',\n  'contextTypes',\n  'displayName',\n  'getChildContext',\n  'getDefaultProps',\n  'getDOMNode',\n  'getInitialState',\n  'mixins',\n  'propTypes',\n  'render',\n  'replaceProps',\n  'setProps',\n  'shouldComponentUpdate',\n  'statics',\n  'updateComponent',\n];\n\nconst isClassComponent = (Component: any) =>\n  Boolean(Component.prototype && Component.prototype.isReactComponent);\n\nexport default function withTheme<P: {}, C: React.ComponentType<P>>(\n  Comp: C\n): C &\n  React.ComponentType<$Diff<P, { theme: Theme }> & { theme?: $Shape<Theme> }> {\n  class ThemedComponent extends React.Component<*> {\n    /* $FlowFixMe */\n    static displayName = `withTheme(${Comp.displayName || Comp.name})`;\n\n    _previous: ?{ a: Theme, b: ?$Shape<Theme>, result: Theme };\n    _merge = (a: Theme, b: ?$Shape<Theme>) => {\n      const previous = this._previous;\n\n      if (previous && previous.a === a && previous.b === b) {\n        return previous.result;\n      }\n\n      const result = a && b ? merge(a, b) : a || b;\n\n      this._previous = { a, b, result };\n\n      return result;\n    };\n\n    _root: any;\n\n    render() {\n      return (\n        <ThemeContext.Consumer>\n          {theme => {\n            const merged = this._merge(theme, this.props.theme);\n\n            let element;\n\n            if (isClassComponent(Comp)) {\n              // Only add refs for class components as function components don't support them\n              // It's needed to support use cases which need access to the underlying node\n              element = (\n                <Comp\n                  {...this.props}\n                  ref={c => {\n                    this._root = c;\n                  }}\n                  theme={merged}\n                />\n              );\n            } else {\n              element = <Comp {...this.props} theme={merged} />;\n            }\n\n            if (merged !== this.props.theme) {\n              // If a theme prop was passed, expose it to the children\n              return <ThemeProvider theme={merged}>{element}</ThemeProvider>;\n            }\n\n            return element;\n          }}\n        </ThemeContext.Consumer>\n      );\n    }\n  }\n\n  if (isClassComponent(Comp)) {\n    // getWrappedInstance is exposed by some HOCs like react-redux's connect\n    // Use it to get the ref to the underlying element\n    // Also expose it to access the underlying element after wrapping\n    // $FlowFixMe\n    ThemedComponent.prototype.getWrappedInstance = function getWrappedInstance() {\n      return this._root.getWrappedInstance\n        ? this._root.getWrappedInstance()\n        : this._root;\n    };\n\n    // Copy non-private methods and properties from underlying component\n    // This will take expose public methods and properties such as `focus`, `setNativeProps` etc.\n    // $FlowFixMe\n    Object.getOwnPropertyNames(Comp.prototype)\n      .filter(\n        prop =>\n          !(\n            REACT_METHODS.includes(prop) || // React specific methods and properties\n            prop in React.Component.prototype || // Properties from React's prototype such as `setState`\n            prop in ThemedComponent.prototype || // Properties from enhanced component's prototype\n            // Private methods\n            prop.startsWith('_')\n          )\n      )\n      .forEach(prop => {\n        // $FlowFixMe\n        if (typeof Comp.prototype[prop] === 'function') {\n          /* eslint-disable func-names */\n          // $FlowFixMe\n          ThemedComponent.prototype[prop] = function(...args) {\n            // Make sure the function is called with correct context\n            // $FlowFixMe\n            Comp.prototype[prop].apply(this.getWrappedInstance(), args);\n          };\n        } else {\n          // Copy properties as getters and setters\n          // This make sure dynamic properties always stay up-to-date\n          Object.defineProperty(ThemedComponent.prototype, prop, {\n            get() {\n              return this.getWrappedInstance()[prop];\n            },\n            set(value) {\n              this.getWrappedInstance()[prop] = value;\n            },\n          });\n        }\n      });\n  }\n\n  hoistNonReactStatics(ThemedComponent, Comp);\n\n  return (ThemedComponent: any);\n}\n"]},"metadata":{},"sourceType":"module"}