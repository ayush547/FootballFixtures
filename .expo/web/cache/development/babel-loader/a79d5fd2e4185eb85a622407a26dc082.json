{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/views/Drawer/DrawerView.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport NavigationActions from \"../../NavigationActions\";\nimport DrawerActions from \"../../routers/DrawerActions\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n\n    _this._handleDrawerOpen = function () {\n      var navigation = _this.props.navigation;\n      var isDrawerOpen = navigation.state.isDrawerOpen;\n\n      if (!isDrawerOpen) {\n        navigation.dispatch({\n          type: DrawerActions.OPEN_DRAWER\n        });\n      }\n    };\n\n    _this._handleDrawerClose = function () {\n      var navigation = _this.props.navigation;\n      var isDrawerOpen = navigation.state.isDrawerOpen;\n\n      if (isDrawerOpen) {\n        navigation.dispatch({\n          type: DrawerActions.CLOSE_DRAWER\n        });\n      }\n    };\n\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this._renderNavigationView = function () {\n      return React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var isDrawerOpen = this.props.navigation.state.isDrawerOpen;\n      var wasDrawerOpen = prevProps.navigation.state.isDrawerOpen;\n\n      if (isDrawerOpen && !wasDrawerOpen) {\n        this._drawer.openDrawer();\n      } else if (wasDrawerOpen && !isDrawerOpen) {\n        this._drawer.closeDrawer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var state = this.props.navigation.state;\n      var activeKey = state.routes[state.index].key;\n      var descriptor = this.props.descriptors[activeKey];\n      var DrawerScreen = descriptor.getComponent();\n      var drawerLockMode = descriptor.options.drawerLockMode;\n      return React.createElement(DrawerLayout, {\n        ref: function ref(c) {\n          _this2._drawer = c;\n        },\n        drawerLockMode: this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, React.createElement(DrawerScreen, {\n        screenProps: this.props.screenProps,\n        navigation: descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nexport { DrawerView as default };","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/views/Drawer/DrawerView.js"],"names":["React","DrawerLayout","DrawerSidebar","NavigationActions","DrawerActions","DrawerView","state","drawerWidth","props","navigationConfig","_handleDrawerOpen","navigation","isDrawerOpen","dispatch","type","OPEN_DRAWER","_handleDrawerClose","CLOSE_DRAWER","_updateWidth","setState","_renderNavigationView","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","Dimensions","addEventListener","removeEventListener","prevProps","prevState","wasDrawerOpen","_drawer","openDrawer","closeDrawer","activeKey","routes","index","key","descriptor","DrawerScreen","getComponent","drawerLockMode","options","c","drawerBackgroundColor","useNativeAnimations","positions","Right","Left","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\n\nimport DrawerSidebar from './DrawerSidebar';\nimport NavigationActions from '../../NavigationActions';\nimport DrawerActions from '../../routers/DrawerActions';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  state = {\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { isDrawerOpen } = this.props.navigation.state;\n    const wasDrawerOpen = prevProps.navigation.state.isDrawerOpen;\n\n    if (isDrawerOpen && !wasDrawerOpen) {\n      this._drawer.openDrawer();\n    } else if (wasDrawerOpen && !isDrawerOpen) {\n      this._drawer.closeDrawer();\n    }\n  }\n\n  _handleDrawerOpen = () => {\n    const { navigation } = this.props;\n    const { isDrawerOpen } = navigation.state;\n    if (!isDrawerOpen) {\n      navigation.dispatch({ type: DrawerActions.OPEN_DRAWER });\n    }\n  };\n\n  _handleDrawerClose = () => {\n    const { navigation } = this.props;\n    const { isDrawerOpen } = navigation.state;\n    if (isDrawerOpen) {\n      navigation.dispatch({ type: DrawerActions.CLOSE_DRAWER });\n    }\n  };\n\n  _updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = () => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  render() {\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n\n    const DrawerScreen = descriptor.getComponent();\n\n    const { drawerLockMode } = descriptor.options;\n\n    return (\n      <DrawerLayout\n        ref={c => {\n          this._drawer = c;\n        }}\n        drawerLockMode={\n          (this.props.screenProps && this.props.screenProps.drawerLockMode) ||\n          this.props.navigationConfig.drawerLockMode\n        }\n        drawerBackgroundColor={\n          this.props.navigationConfig.drawerBackgroundColor\n        }\n        drawerWidth={this.state.drawerWidth}\n        onDrawerOpen={this._handleDrawerOpen}\n        onDrawerClose={this._handleDrawerClose}\n        useNativeAnimations={this.props.navigationConfig.useNativeAnimations}\n        renderNavigationView={this._renderNavigationView}\n        drawerPosition={\n          this.props.navigationConfig.drawerPosition === 'right'\n            ? DrawerLayout.positions.Right\n            : DrawerLayout.positions.Left\n        }\n      >\n        <DrawerScreen\n          screenProps={this.props.screenProps}\n          navigation={descriptor.navigation}\n        />\n      </DrawerLayout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}