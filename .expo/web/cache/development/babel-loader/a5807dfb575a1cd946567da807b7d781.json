{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from \"./utils/invariant\";\nvar StateUtils = {\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      return state;\n    }\n\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index: index\n    });\n  },\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n  replaceAt: function replaceAt(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    return StateUtils.replaceAtIndex(state, index, route);\n  },\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index: index,\n      routes: routes\n    });\n  },\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation/src/StateUtils.js"],"names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","reset","Array","isArray","nextIndex","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   */\n  replaceAt(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.replaceAtIndex(state, index, route);\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the positon to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]},"metadata":{},"sourceType":"module"}