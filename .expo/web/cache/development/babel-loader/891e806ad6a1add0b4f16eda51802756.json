{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-material-bottom-tabs/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n\n    var _super = _createSuper(NavigationView);\n\n    function NavigationView() {\n      var _this;\n\n      _classCallCheck(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _this._renderScene = function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 14\n          }\n        });\n      };\n\n      _this._renderIcon = function (_ref2) {\n        var route = _ref2.route,\n            _ref2$focused = _ref2.focused,\n            focused = _ref2$focused === void 0 ? true : _ref2$focused,\n            tintColor = _ref2.tintColor;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      _this._getLabelText = function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      _this._handleOnTabPress = function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation\n          });\n        } else {\n          var isFocused = _this.props.navigation.state.index === _this.props.navigation.state.routes.indexOf(route);\n\n          if (isFocused) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {}\n          }\n        }\n      };\n\n      _this._handleIndexChange = function (index) {\n        var navigation = _this.props.navigation;\n        navigation.dispatch(NavigationActions.navigate({\n          routeName: navigation.state.routes[index].routeName\n        }));\n      };\n\n      return _this;\n    }\n\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n\n        var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n\n        return React.createElement(TabView, _extends({}, options, {\n          getLabelText: this._getLabelText,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleOnTabPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n\n    return NavigationView;\n  }(React.Component);\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    var navigator = createNavigator(NavigationView, router, config);\n    return createNavigationContainer(navigator);\n  };\n}","map":{"version":3,"sources":["/home/narensairam/Desktop/react-native/fixtures/node_modules/react-navigation-material-bottom-tabs/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","createNavigationContainer","NavigationActions","createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","options","tabBarIcon","_getLabelText","tabBarLabel","title","routeName","_handleOnTabPress","tabBarOnPress","isFocused","state","index","routes","indexOf","hasOwnProperty","dispatch","popToTop","_handleIndexChange","navigate","navigationConfig","Component","config","router","navigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\n\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return <SceneView screenProps={screenProps} navigation={descriptor.navigation} component={TabComponent} />;\n    };\n\n    _renderIcon = ({ route, focused = true, tintColor }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ focused, tintColor }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _handleOnTabPress = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({\n          navigation\n        });\n      } else {\n        const isFocused = this.props.navigation.state.index === this.props.navigation.state.routes.indexOf(route);\n\n        if (isFocused) {\n          if (route.hasOwnProperty('index') && route.index > 0) {\n            navigation.dispatch(StackActions.popToTop({ key: route.key }));\n          } else {\n            // TODO: do something to scroll to top\n          }\n        }\n      }\n    };\n\n    _handleIndexChange = index => {\n      const { navigation } = this.props;\n      navigation.dispatch(NavigationActions.navigate({\n        routeName: navigation.state.routes[index].routeName\n      }));\n    };\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options\n      };\n\n      return <TabView {...options} getLabelText={this._getLabelText} renderIcon={this._renderIcon} renderScene={this._renderScene} onIndexChange={this._handleIndexChange} onTabPress={this._handleOnTabPress} navigation={navigation} descriptors={descriptors} screenProps={screenProps} />;\n    }\n  }\n\n  return (routes, config = {}) => {\n    const router = TabRouter(routes, config);\n    const navigator = createNavigator(NavigationView, router, config);\n\n    return createNavigationContainer(navigator);\n  };\n}"]},"metadata":{},"sourceType":"module"}